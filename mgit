#!/bin/bash

DIR="$( pwd )"
PARAMS=("$@")

project_codes(){
  echo "Project codes available here:" >&2
  SAVEIFS=$IFS
  IFS=$(echo -en "\n\b")
  for FILE in .mgit.*; do
    if [[ "$FILE" = '.mgit.*' ]]; then
      continue
    fi
    echo "${FILE/.mgit./* }" >&2
  done
  IFS=$SAVEIFS

  echo >&2
}

usage(){
  echo -e "Usage: \n  mgit <project code> ... rest of git command ...\n  mgit <project code> clone <repo URL> [path to deploy key]\n" >&2
}

# We need at least #0 (project code) and #1 (git verb)
if [[ -z "${PARAMS[1]}" ]]; then
  if [[ -z "${PARAMS[0]}" ]]; then
    project_codes
  fi
  usage
  exit 1
fi

SUFFIX="${PARAMS[0]//[^a-zA-Z0-9]/}"
GITFOLDER=".mgit.$SUFFIX"

case "$2" in
  "clone")
    if [[ -d "$DIR/$GITFOLDER" ]]; then
      echo "There is already a project with code '$SUFFIX' in here!" >&2
      exit 1
    fi

    TMPFOLDER=".mgit-tmp-$SUFFIX"
    TMPSSH=".mgit-ssh-$SUFFIX"

    # Check if we were given a path to a deploy key
    if [[ ! -z "${PARAMS[3]}" ]]; then
      DEPLOYKEY="${PARAMS[3]}"
      if [[ ! -f "${DEPLOYKEY}" ]]; then
        echo -e "The deploy key provided does not exist!\n\nIf you need to generate one: \n  ssh-keygen -t rsa -b 4096 -N '' -C <description> -f <target file>\n  chmod g=,o= <target file>\n" >&2
        exit 1
      fi
      PERMS="$( stat -c '%a' ${DEPLOYKEY} )"
      if [[ "${PERMS:1}" != "00" ]]; then
        echo "The deploy key permissions are too open (${PERMS})!" >&2
        exit 1
      fi

      # Make the temporary GIT_SSH script to propagate the key
      echo '#!/bin/sh' > "$TMPSSH"
      echo "ssh -i \"$DEPLOYKEY\" \"\$@\"" >> "$TMPSSH"
      chmod +x "$TMPSSH"

      # Add a trap in case the clone fails, to cleanup the temporary script
      trap 'rm -f "$TMPSSH"' 0

      GIT_SSH="${DIR}/${TMPSSH}" git clone "${PARAMS[2]}" "$TMPFOLDER"
    else
      git clone "${PARAMS[2]}" "$TMPFOLDER"
    fi

    if [[ "$?" -ne "0" ]]; then
      echo "git clone failed!" >&2
      exit 1
    fi

    # Move .git to its target location
    mv "$TMPFOLDER/.git" "$GITFOLDER"
    # Ignore all files that are not in the index
    echo "**" > "$GITFOLDER/info/exclude"
    # Move the checked out'ed contents but without overwriting. 
    # Note: we don't try (but might) to make a perfect copy (might miss hidden files and subfolders)
    # But that's not the use case for mgit anyway
    yes | tr y n | mv -i "$TMPFOLDER"/* .
    
    rm -rf "$TMPFOLDER"    

    if [[ ! -z "${DEPLOYKEY}" ]]; then
      # We make the deploy key configuration more permanent
      mv "${TMPSSH}" "$GITFOLDER/mgit-ssh"
    fi

    ;;
  *)
    if [[ ! -d "$DIR/$GITFOLDER" ]]; then
      echo "Unknown project '$SUFFIX'!" >&2
      project_codes
      usage
      exit 1
    fi

    if [[ -f "$GITFOLDER/mgit-ssh" ]]; then
      GIT_SSH="$GITFOLDER/mgit-ssh" GIT_DIR="$GITFOLDER" git "${PARAMS[@]:1}"
    else
      GIT_DIR="$GITFOLDER" git "${PARAMS[@]:1}"
    fi
    ;;
esac
